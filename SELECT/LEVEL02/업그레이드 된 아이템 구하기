Description
어느 한 게임에서 사용되는 아이템들은 업그레이드가 가능합니다.
'ITEM_A'->'ITEM_B'와 같이 업그레이드가 가능할 때
'ITEM_A'를 'ITEM_B' 의 PARENT 아이템,
PARENT 아이템이 없는 아이템을 ROOT 아이템이라고 합니다.

예를 들어 'ITEM_A'->'ITEM_B'->'ITEM_C'와 같이 업그레이드가 가능한 아이템이 있다면
'ITEM_C'의 PARENT 아이템은 'ITEM_B'
'ITEM_B'의 PARENT 아이템은 'ITEM_A'
ROOT 아이템은 'ITEM_A'가 됩니다.

다음은 해당 게임에서 사용되는 아이템 정보를 담은 ITEM_INFO 테이블과 아이템 관계를 나타낸 ITEM_TREE 테이블입니다. ITEM_INFO 테이블은 다음과 같으며, ITEM_ID, ITEM_NAME, RARITY, PRICE는 각각 아이템 ID, 아이템 명, 아이템의 희귀도, 아이템의 가격을 나타냅니다.

Column name	Type	Nullable
ITEM_ID	INTEGER	FALSE
ITEM_NAME	VARCHAR(N)	FALSE
RARITY	INTEGER	FALSE
PRICE	INTEGER	FALSE
ITEM_TREE 테이블은 다음과 같으며, ITEM_ID, PARENT_ITEM_ID는 각각 아이템 ID, PARENT 아이템의 ID를 나타냅니다.

Column name	Type	Nullable
ITEM_ID	INTEGER	FALSE
PARENT_ITEM_ID	INTEGER	TRUE
단, 각 아이템들은 오직 하나의 PARENT 아이템 ID를 가지며, ROOT 아이템의 PARENT 아이템 ID는 NULL 입니다.

ROOT 아이템이 없는 경우는 존재하지 않습니다.

문제
아이템의 희귀도가 'RARE'인 아이템들의 모든 다음 업그레이드 아이템의 아이템 ID(ITEM_ID), 아이템 명(ITEM_NAME), 아이템의 희귀도(RARITY)를 출력하는 SQL 문을 작성해 주세요. 이때 결과는 아이템 ID를 기준으로 내림차순 정렬주세요.

예시
예를 들어 ITEM_INFO 테이블이 다음과 같고

ITEM_ID	ITEM_NAME	RARITY	PRICE
0	ITEM_A	RARE	10000
1	ITEM_B	RARE	9000
2	ITEM_C	LEGEND	11000
3	ITEM_D	RARE	10000
4	ITEM_E	RARE	12000
ITEM_TREE 테이블이 다음과 같다면

ITEM_ID	PARENT_ITEM_ID
0	NULL
1	0
2	0
3	1
4	1
아이템의 희귀도가 'RARE'인 아이템은 'ITEM_A', 'ITEM_B', 'ITEM_D', 'ITEM_E' 입니다.
이 중 'ITEM_A' 는 'ITEM_B', 'ITEM_C' 로 업그레이드가 가능하며 'ITEM_B' 는 'ITEM_D' , 'ITEM_E' 로 업그레이드가 가능합니다. 'ITEM_D' 와 'ITEM_E'는 더 이상 업그레이드가 가능하지 않습니다. 따라서 결과는 다음과 같이 나와야 합니다.

ITEM_ID	ITEM_NAME	RARITY
4	ITEM_E	RARE
3	ITEM_D	RARE
2	ITEM_C	LEGEND
1	ITEM_B	RARE
※ 참고: 본 문제는 제출 내역 확인 기능을 지원하지 않습니다.

SOLUTION
SELECT II.ITEM_ID, II.ITEM_NAME, II.RARITY
FROM ITEM_INFO II
JOIN ITEM_TREE IT ON II.ITEM_ID = IT.ITEM_ID
WHERE IT.PARENT_ITEM_ID IN(
    SELECT ITEM_ID
    FROM ITEM_INFO
    WHERE RARITY = 'RARE'
)
ORDER BY ITEM_ID DESC;

이 문제 풀면서 JOIN을 해야겠다는 알겠는데 서브쿼리가 왜 저렇게 나오는지 이해를 못했음...
근데 사실 JOIN으로만 하면 현재 희귀도가 RARE인 아이템의 다음 업그레이드 아이템들을 필터링하는게 어렵다는건 알겠음ㅋㅋㅋ
정말 이해가 안가는건 왜 LEGEND 등급이 쿼리 결과에 포함되는건지!!!가 이해가 안감...

INNER JOIN 결과

ITEM_ID	ITEM_NAME	RARITY	PRICE	PARENT_ITEM_ID
0	ITEM_A	RARE	10000	NULL
1	ITEM_B	RARE	9000	0
2	ITEM_C	LEGEND	11000	0
3	ITEM_D	RARE	10000	1
4	ITEM_E	RARE	12000	1

WHERE 절의 SUBQUERY 결과

ITEM_ID
0
1
3
4

메인 쿼리의 동작
메인 쿼리는 이 서브쿼리의 결과로 나온 ITEM_ID(즉, 희귀도가 "RARE"인 아이템들)의 PARENT_ITEM_ID를 가진 아이템들을 ITEM_TREE 테이블에서 찾습니다. 그 후, 이 아이템들의 정보를 ITEM_INFO에서 가져옵니다.

sql
Copy code
SELECT II.ITEM_ID, II.ITEM_NAME, II.RARITY
FROM ITEM_INFO II
JOIN ITEM_TREE IT ON II.ITEM_ID = IT.ITEM_ID
WHERE IT.PARENT_ITEM_ID IN (
    SELECT ITEM_ID
    FROM ITEM_INFO
    WHERE RARITY = 'RARE'
)
ORDER BY ITEM_ID DESC;
결과에서 LEGEND가 포함되는 이유
이제, 조인을 통해 얻어진 중간 결과를 살펴봅시다:

ITEM_ID가 0인 아이템(ITEM_A)은 "RARE" 등급입니다.
ITEM_ID가 1인 아이템(ITEM_B)은 "RARE" 등급이고, 이 아이템은 PARENT_ITEM_ID가 0입니다. 즉, ITEM_A에서 업그레이드된 것입니다.
ITEM_ID가 2인 아이템(ITEM_C)은 "LEGEND" 등급이고, 이 아이템 역시 PARENT_ITEM_ID가 0입니다. 즉, ITEM_A에서 업그레이드된 것입니다.
ITEM_ID가 3인 아이템(ITEM_D)은 "RARE" 등급이고, PARENT_ITEM_ID는 1입니다. 즉, ITEM_B에서 업그레이드된 것입니다.
ITEM_ID가 4인 아이템(ITEM_E)은 "RARE" 등급이고, PARENT_ITEM_ID는 1입니다. 즉, ITEM_B에서 업그레이드된 것입니다.
이 과정에서 "LEGEND" 등급의 ITEM_C는 "RARE" 등급의 ITEM_A에서 업그레이드된 것이므로, 쿼리 결과에 포함됩니다.

결론
"LEGEND" 등급의 아이템이 쿼리 결과에 포함되는 이유는, 이 아이템이 "RARE" 등급의 부모 아이템으로부터 업그레이드된 아이템이기 때문입니다. 쿼리는 "RARE" 등급의 아이템으로부터 업그레이드된 모든 아이템을 찾기 때문에, 그 결과에 "LEGEND" 등급의 아이템도 포함될 수 있는 것입니다.
